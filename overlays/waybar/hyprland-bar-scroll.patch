From 01dcf628f6bbd10ffb4bb0a29f9b8c93edbb5636 Mon Sep 17 00:00:00 2001
From: vawvaw <valentin@wiedekind1.de>
Date: Tue, 13 Feb 2024 17:55:11 +0100
Subject: [PATCH] hyprland/workspaces: Add `enable-bar-scroll` option

---
 include/modules/hyprland/workspaces.hpp |  5 ++++
 man/waybar-hyprland-workspaces.5.scd    |  5 ++++
 src/modules/hyprland/workspaces.cpp     | 35 +++++++++++++++++++++++++
 3 files changed, 45 insertions(+)

diff --git a/include/modules/hyprland/workspaces.hpp b/include/modules/hyprland/workspaces.hpp
index a9d56b79..bb0ea496 100644
--- a/include/modules/hyprland/workspaces.hpp
+++ b/include/modules/hyprland/workspaces.hpp
@@ -37,6 +37,7 @@ class Workspaces : public AModule, public EventHandler {
   auto activeOnly() const -> bool { return m_activeOnly; }
   auto specialVisibleOnly() const -> bool { return m_specialVisibleOnly; }
   auto moveToMonitor() const -> bool { return m_moveToMonitor; }
+  auto barScroll() const -> bool { return m_barScroll; }
 
   auto getBarOutput() const -> std::string { return m_bar.output->name; }
 
@@ -93,6 +94,9 @@ class Workspaces : public AModule, public EventHandler {
 
   int windowRewritePriorityFunction(std::string const& window_rule);
 
+  // scroll events
+  bool handleScroll(GdkEventScroll* e) override;
+
   // Update methods
   void doUpdate();
   void removeWorkspacesToRemove();
@@ -114,6 +118,7 @@ class Workspaces : public AModule, public EventHandler {
   bool m_activeOnly = false;
   bool m_specialVisibleOnly = false;
   bool m_moveToMonitor = false;
+  bool m_barScroll = false;
   Json::Value m_persistentWorkspaceConfig;
 
   // Map for windows stored in workspaces not present in the current bar.
diff --git a/man/waybar-hyprland-workspaces.5.scd b/man/waybar-hyprland-workspaces.5.scd
index c71168d4..5ba0300a 100644
--- a/man/waybar-hyprland-workspaces.5.scd
+++ b/man/waybar-hyprland-workspaces.5.scd
@@ -65,6 +65,11 @@ Addressed by *hyprland/workspaces*
 	Otherwise, the workspace will open on the monitor where it was previously assigned.
 	Analog to using `focusworkspaceoncurrentmonitor` dispatcher instead of `workspace` in Hyprland.
 
+*enable-bar-scroll*: ++
+	typeof: bool ++
+	default: false ++
+	If set to false, you can't scroll to cycle throughout workspaces from the entire bar. If set to true this behaviour is enabled.
+
 *ignore-workspaces*: ++
 	typeof: array ++
 	default: [] ++
diff --git a/src/modules/hyprland/workspaces.cpp b/src/modules/hyprland/workspaces.cpp
index 13364f3f..c43fed08 100644
--- a/src/modules/hyprland/workspaces.cpp
+++ b/src/modules/hyprland/workspaces.cpp
@@ -43,6 +43,13 @@ void Workspaces::init() {
   m_activeWorkspaceName = (gIPC->getSocket1JsonReply("activeworkspace"))["name"].asString();
 
   initializeWorkspaces();
+
+  if (barScroll()) {
+    auto &window = const_cast<Bar &>(m_bar).window;
+    window.add_events(Gdk::SCROLL_MASK | Gdk::SMOOTH_SCROLL_MASK);
+    window.signal_scroll_event().connect(sigc::mem_fun(*this, &Workspaces::handleScroll));
+  }
+
   dp.emit();
 }
 
@@ -575,6 +582,7 @@ auto Workspaces::parseConfig(const Json::Value &config) -> void {
   populateBoolConfig(config, "special-visible-only", m_specialVisibleOnly);
   populateBoolConfig(config, "active-only", m_activeOnly);
   populateBoolConfig(config, "move-to-monitor", m_moveToMonitor);
+  populateBoolConfig(config, "enable-bar-scroll", m_barScroll);
 
   m_persistentWorkspaceConfig = config.get("persistent-workspaces", Json::Value());
   populateSortByConfig(config);
@@ -905,4 +913,31 @@ int Workspaces::windowRewritePriorityFunction(std::string const &window_rule) {
   return 0;
 }
 
+bool Workspaces::handleScroll(GdkEventScroll *e) {
+  // Ignore emulated scroll events on window
+  if (gdk_event_get_pointer_emulated((GdkEvent *)e)) {
+    return false;
+  }
+  auto dir = AModule::getScrollDir(e);
+  if (dir == SCROLL_DIR::NONE) {
+    return true;
+  }
+
+  if (dir == SCROLL_DIR::DOWN || dir == SCROLL_DIR::RIGHT) {
+    if (allOutputs()) {
+      gIPC->getSocket1Reply("dispatch workspace e+1");
+    } else {
+      gIPC->getSocket1Reply("dispatch workspace m+1");
+    }
+  } else if (dir == SCROLL_DIR::UP || dir == SCROLL_DIR::LEFT) {
+    if (allOutputs()) {
+      gIPC->getSocket1Reply("dispatch workspace e-1");
+    } else {
+      gIPC->getSocket1Reply("dispatch workspace m-1");
+    }
+  }
+
+  return true;
+}
+
 }  // namespace waybar::modules::hyprland
-- 
2.44.1

